version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here   
    steps:
      - run:
          name: Destroy environments
          command: |
            aws cloudformation delete-stack --stack-name "devproj-frontend-${CIRCLE_WORKFLOW_ID}"
            aws cloudformation delete-stack --stack-name "devproj-backend-${CIRCLE_WORKFLOW_ID}"
          when: on_fail
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS = 1
            if(( $SUCCESS==1 )); 
            then
            #  cd ~/project/backend
            #  npm install
            #  Add revert code here. You can find this in the Getting Started section.
              exit 1
            fi
            
jobs:
  build-frontend:
    docker:
      - image: cimg/node:16.4.0
    steps:
      - checkout
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          key: fe-deps-{{ checksum "package-lock.json" }}
          paths:
            - "node_modules"

  build-backend:
    docker:
      - image: cimg/node:16.4.0
    steps:
      - checkout
      - run:
          name: Back-end build
          command: |
             cd backend
             npm install
             npm run build
      - save_cache:
          key: be-deps-{{ checksum "package-lock.json" }}
          paths:
            - "node_modules"
  test-frontend:
    docker:
      - image: cimg/node:16.4.0
    steps:
      - checkout
      - restore_cache:
          keys: 
            - fe-deps-{{ checksum "package-lock.json" }}
            - fe-deps-
      - run:
          name: backend-test
          command: |
            cd backend
            npm install
            npm test
                
  test-backend:
    docker:
      - image: cimg/node:16.4.0
    steps:
      - checkout
      - restore_cache:
          keys: 
            - be-deps-{{ checksum "package-lock.json" }}
            - be-deps-
      - run:
          name: backend-test
          command: |
            cd backend
            npm install
            npm test
  scan-frontend:
    docker:
      - image: cimg/node:16.4.0
    steps:
      - checkout
      - restore_cache:
          keys: 
            - fe-deps-{{ checksum "package-lock.json" }}
            - fe-deps-
      - run:
          name: frontend-scan
          command: |
            cd backend
            npm audit fix --audit-level=critical --force

  scan-backend:
    docker:
      - image: cimg/node:16.4.0
    steps:
      - checkout
      - restore_cache:
          keys: 
            - be-deps-{{ checksum "package-lock.json" }}
            - be-deps-
      - run:
          name: backend-scan
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
               --stack-name "devproj-backend-${CIRCLE_WORKFLOW_ID}" \
               --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}" \
               --tags Devproj=backend
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
               --stack-name "devproj-frontend-${CIRCLE_WORKFLOW_ID}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}" \
                --tags Devproj=frontend
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            pwd
            ls ./.circleci/ansible
            aws ec2 describe-instances --filters Name=tag:Devproj,Values=backend --query 'Reservations[*].Instances[*].PublicIpAddress' --output text >> ./.circleci/ansible/inventory.txt
            cat ./.circleci/ansible/inventory.txt
      - destroy-environment
      
  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "90:86:4b:00:0e:42:c3:a1:f6:89:63:61:3e:24:94:f5"
      - attach_workspace:
          at: ~/project

      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip ansible nodejs npm curl
            pip install awscli
      - run:
          name: Configure server
          no_output_timeout: 30m
          command: |
            cd .circleci/ansible
            aws ec2 describe-instances --filters Name=tag:Devproj,Values=backend --query 'Reservations[*].Instances[*].PublicIpAddress' --output text >> inventory.txt
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment
  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Run migrations
          command: |
            cd backend
            npm run migrations > migration_result    
      - run:
          name: send output of migration to memstash
          command: |
            if grep -q "has been executed successfully" migration_result
            then 
              echo "migration ran successfully, updating memstash"
              curl -H "Content-Type: text/plain" -H "token: 20aa5ea7-7727-4f1c-847d-2c5dbd9ae855" --request PUT --data "migrated" https://api.memstash.io/values/db_migration-${CIRCLE_WORKFLOW_ID:0:7}
            else
              echo "migration failed"
              curl -H "Content-Type: text/plain" -H "token: 20aa5ea7-7727-4f1c-847d-2c5dbd9ae855" --request PUT --data "failed" https://api.memstash.io/values/db_migration-${CIRCLE_WORKFLOW_ID:0:7}
            fi
      - destroy-environment
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [maint]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
     
